Pour le style css 


body {
    font-family: Arial, sans-serif;
    background-color: #f4f6f8;
    color: #222;
    margin: 0;
    padding: 20px;
  }
  
  h1 {
    text-align: center;
    color: #cc0000;
  }
  
  #boutons-entreprises {
    text-align: center;
    margin-bottom: 30px;
  }
  
  #boutons-entreprises button {
    margin: 5px;
    padding: 10px 20px;
    font-size: 16px;
    border-radius: 8px;
    border: none;
    background-color: #cc0000;
    color: white;
    cursor: pointer;
  }
  
  #boutons-entreprises button:hover {
    background-color: #a80000;
  }
  
  #zone-affichage {
    max-width: 800px;
    margin: 0 auto;
  }
  
  canvas {
    margin-top: 20px;
    max-width: 100%;
  }
  
  #tendance {
    font-weight: bold;
    font-size: 18px;
    margin-top: 10px;
    color: #444;
  }
  
  #actus {
    margin-top: 20px;
  }
  
  #actus div {
    background-color: white;
    padding: 15px;
    margin-bottom: 15px;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.05);
  }
  .cours {
    font-weight: bold;
    color: #006600;
    margin-bottom: 10px;
  }
  #votes-tendance button {
    margin: 5px;
    padding: 8px 16px;
    border: none;
    background-color: #444;
    color: white;
    border-radius: 6px;
    cursor: pointer;
  }
  
  #votes-tendance button:hover {
    background-color: #666;
  }

pour app.py

from flask import Flask, jsonify, send_from_directory
import requests
from textblob import TextBlob
from datetime import datetime, timedelta

# === Configuration ===
application = Flask(__name__, static_folder='../static', static_url_path='')

CLÉ_API_NEWS = 'b741529903424b0ca280b6e9d8f7c32d'  # Remplace par ta vraie clé
ENTREPRISES = ['Google', 'Apple', 'Facebook', 'Amazon', 'Microsoft', 'Tesla']


# === Analyse de sentiment ===
def analyser_sentiment(texte):
    blob = TextBlob(texte)
    polarité = blob.sentiment.polarity
    if polarité >= 0.3:
        return 'très positif'
    elif 0.1 <= polarité < 0.3:
        return 'légèrement positif'
    elif -0.3 <= polarité < -0.1:
        return 'légèrement négatif'
    elif polarité <= -0.3:
        return 'très négatif'
    else:
        return 'neutre'


def calculer_variation_depuis_actualites(articles):
    variation = 0
    for article in articles:
        texte = f"{article.get('title', '')} {article.get('description', '')}"
        sentiment = analyser_sentiment(texte)
        if sentiment == 'très positif':
            variation += 3
        elif sentiment == 'légèrement positif':
            variation += 1
        elif sentiment == 'légèrement négatif':
            variation -= 1
        elif sentiment == 'très négatif':
            variation -= 3
    return max(-5, min(5, variation))


# === Route d’accueil : sert index.html ===
@application.route('/')
def accueil():
    return send_from_directory(application.static_folder, 'index.html')


# === API : actualités + sentiment + variation ===
@application.route('/api/actualites-entreprises')
def actualites_entreprises():
    actualites = {}
    yesterday = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')

    for entreprise in ENTREPRISES:
        url = (
            f'https://newsapi.org/v2/everything?'
            f'q={entreprise}&language=fr&from={yesterday}&to={yesterday}&sortBy=publishedAt&apiKey={CLÉ_API_NEWS}'
        )
        réponse = requests.get(url)
        données = réponse.json()
        articles = données.get('articles', [])[:5]

        # Analyse des sentiments et calcul variation
        for article in articles:
            texte = f"{article.get('title', '')} {article.get('description', '')}"
            article['sentiment'] = analyser_sentiment(texte)

        variation = calculer_variation_depuis_actualites(articles)

        actualites[entreprise] = {
            'articles': articles,
            'variation': variation
        }

    return jsonify(actualites)


# === Lancer l'application ===
if __name__ == '__main__':
    print(">>> Serveur Flask en cours de démarrage...")
    application.run(debug=True)


pour indexhtms 

<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <title>Boursoramax - Cotes & Actus GAFAM</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap" rel="stylesheet">
  <style>
    body {
      background-color: #121212;
      color: white;
      font-family: 'Inter', sans-serif;
      margin: 0;
      padding: 20px;
    }
    #titre-principal {
      text-align: center;
      font-size: 40px;
      font-weight: bold;
      margin-bottom: 10px;
    }
    #solde-utilisateur {
      text-align: center;
      font-size: 20px;
      margin-bottom: 10px;
    }
    #solde {
      font-weight: bold;
      color: #2ecc71;
    }
    #form-mise {
      text-align: center;
      margin-bottom: 30px;
    }
    #form-mise input {
      width: 60px;
      padding: 5px;
      border-radius: 5px;
      text-align: center;
    }
    #cartes-entreprises {
      display: grid;
      grid-template-columns: 1fr;
      gap: 40px;
      max-width: 800px;
      margin: 0 auto;
    }
    .carte-entreprise {
      background-color: #1f1f1f;
      border-radius: 20px;
      padding: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      box-shadow: 0 6px 20px rgba(0, 0, 0, 0.4);
      transition: transform 0.2s ease, background-color 0.2s ease;
    }
    .carte-entreprise:hover {
      transform: scale(1.03);
      background-color: #292929;
    }
    .logo-entreprise {
      max-width: 180px;
      max-height: 120px;
      object-fit: contain;
      margin-bottom: 20px;
    }
    .nom-entreprise {
      font-size: 20px;
      font-weight: bold;
      margin-bottom: 12px;
    }
    .cotes {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 12px;
    }
    .bouton-cote {
      padding: 12px 20px;
      border-radius: 16px;
      font-size: 18px;
      font-weight: bold;
      border: none;
      cursor: pointer;
      min-width: 120px;
      text-align: center;
      transition: transform 0.2s ease;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
    }
    .bouton-cote:hover {
      transform: scale(1.05);
    }
    .cote-monte {
      background-color: #d62828;
      color: white;
    }
    .cote-descend {
      background-color: #f4f4f4;
      color: #222;
    }
    #zone-affichage {
      display: none;
      max-width: 1000px;
      margin: 50px auto;
      padding: 20px;
      background-color: #1c1c1c;
      border-radius: 10px;
    }
    #actus div {
      background-color: #2a2a2a;
      padding: 15px;
      margin-bottom: 15px;
      border-radius: 8px;
    }
    #resultat-simulation {
      display: none;
      margin-top: 20px;
      font-size: 18px;
      font-weight: bold;
    }
    #historique {
      margin-top: 30px;
    }
    #historique h3 {
      margin-bottom: 10px;
      font-size: 20px;
    }
    #historique ul {
      list-style-type: none;
      padding: 0;
    }
    #historique li {
      background-color: #2c2c2c;
      padding: 10px;
      border-radius: 8px;
      margin-bottom: 10px;
      font-size: 14px;
    }
    #graphique-paris-container {
      margin-top: 40px;
    }
    canvas {
      margin-top: 20px;
      width: 100%;
      max-width: 100%;
      background-color: #333;
      border-radius: 10px;
    }
  </style>
</head>
<body>
  <h1 id="titre-principal">📊 Boursoramax</h1>
  <div id="solde-utilisateur">💰 Solde : <span id="solde">100</span> pièces</div>
  <div id="form-mise">🎯 Mise : <input type="number" id="input-mise" value="10" min="1" step="1"> pièces</div>
  <div id="cartes-entreprises"></div>
  <div id="zone-affichage">
    <h2 id="titre-entreprise"></h2>
    <canvas id="graphique"></canvas>
    <div id="actus" style="margin-top: 20px;"></div>
    <div id="resultat-simulation"></div>
    <div id="historique">
      <h3>📜 Historique des paris</h3>
      <ul id="liste-historique"></ul>
    </div>
    <div id="graphique-paris-container">
      <h3>📈 Historique du solde après chaque pari</h3>
      <canvas id="graphique-paris"></canvas>
    </div>
  </div>
  <script>
    const entreprises = {
      Google: "https://upload.wikimedia.org/wikipedia/commons/2/2f/Google_2015_logo.svg",
      Apple: "https://cdn-icons-png.flaticon.com/512/0/747.png",
      Facebook: "https://upload.wikimedia.org/wikipedia/commons/5/51/Facebook_f_logo_%282019%29.svg",
      Amazon: "https://upload.wikimedia.org/wikipedia/commons/a/a9/Amazon_logo.svg",
      Microsoft: "https://upload.wikimedia.org/wikipedia/commons/4/44/Microsoft_logo.svg",
      Tesla: "https://upload.wikimedia.org/wikipedia/commons/e/e8/Tesla_logo.png"
    };

    const motsPositifs = ["hausse", "bénéfice", "bon", "croissance", "succès", "record", "accord", "partenariat", "lancement", "réussi"];
    const motsNegatifs = ["baisse", "perte", "crise", "mauvais", "déception", "échec", "retard", "problème", "chute", "procès"];

    function analyserSentiment(texte) {
      const mots = texte.toLowerCase().split(/\W+/);
      let score = 0;
      mots.forEach(mot => {
        if (motsPositifs.includes(mot)) score++;
        if (motsNegatifs.includes(mot)) score--;
      });
      return score;
    }

    function calculerCotes(score) {
      const probaMonte = Math.min(0.95, Math.max(0.05, 0.5 + score / 20));
      return {
        monte: (1 / probaMonte).toFixed(2),
        descend: (1 / (1 - probaMonte)).toFixed(2)
      };
    }

    let solde = parseFloat(localStorage.getItem("solde")) || 100;
    const historique = JSON.parse(localStorage.getItem("historique")) || [];
    let graphiqueParis;
    const donneesParis = {
      labels: [],
      datasets: [{
        label: 'Solde après chaque pari',
        data: [],
        fill: false,
        borderColor: '#00bcd4',
        backgroundColor: '#00bcd4',
        tension: 0.3
      }]
    };

    function majGraphiqueParis() {
      const ctx = document.getElementById("graphique-paris").getContext("2d");
      if (graphiqueParis) graphiqueParis.destroy();
      graphiqueParis = new Chart(ctx, {
        type: 'line',
        data: donneesParis,
        options: { scales: { y: { beginAtZero: true } } }
      });
    }

    function getMise() {
      const input = document.getElementById("input-mise");
      const mise = parseFloat(input.value);
      return isNaN(mise) || mise < 1 ? 1 : mise;
    }

    function majSolde() {
      document.getElementById("solde").textContent = solde.toFixed(2);
      localStorage.setItem("solde", solde.toFixed(2));
    }

    function ajouterHistorique(entry) {
      historique.unshift(entry);
      if (historique.length > 5) historique.pop();
      localStorage.setItem("historique", JSON.stringify(historique));
      afficherHistorique();
      donneesParis.labels.push(`#${donneesParis.labels.length + 1}`);
      donneesParis.datasets[0].data.push(parseFloat(entry.solde));
      majGraphiqueParis();
    }

    function afficherHistorique() {
      const ul = document.getElementById("liste-historique");
      ul.innerHTML = "";
      historique.forEach(item => {
        const li = document.createElement("li");
        li.textContent = `${item.date} | ${item.nom} | ${item.prediction} | ${item.variation}% | ${item.resultat} ${item.montant} pièces`;
        ul.appendChild(li);
      });
    }

    function afficherCartesEntreprises() {
      const container = document.getElementById("cartes-entreprises");
      container.innerHTML = "";

      Object.keys(entreprises).forEach(nom => {
        const bloc = document.createElement("div");
        bloc.className = "carte-entreprise";

        const actus = [
          { title: `${nom} en forte croissance`, description: `${nom} annonce une hausse record de ses ventes.` },
          { title: `${nom} visé par une enquête`, description: `Rumeurs de procès contre ${nom}.` }
        ];

        let scoreTotal = 0;
        actus.forEach(article => {
          scoreTotal += analyserSentiment(article.title + ' ' + article.description);
        });

        const { monte, descend } = calculerCotes(scoreTotal);

        bloc.innerHTML = `
          <img src="${entreprises[nom]}" alt="${nom}" class="logo-entreprise">
          <div class="nom-entreprise">${nom}</div>
          <div class="cotes">
            <button class="bouton-cote cote-monte">⬆️ ${monte}</button>
            <button class="bouton-cote cote-descend">⬇️ ${descend}</button>
          </div>
        `;

        setTimeout(() => {
          const boutons = bloc.querySelectorAll(".bouton-cote");
          boutons[0].addEventListener("click", () => simulerPrediction(nom, "⬆️", parseFloat(monte)));
          boutons[1].addEventListener("click", () => simulerPrediction(nom, "⬇️", parseFloat(descend)));
        }, 0);

        bloc.onclick = () => afficherDetails(nom);
        container.appendChild(bloc);
      });
    }

    function simulerPrediction(nom, prediction, cote) {
      const resultatDiv = document.getElementById("resultat-simulation");
      const mise = getMise();
      if (solde < mise) {
        resultatDiv.textContent = "❌ Pas assez de pièces pour parier.";
        resultatDiv.style.color = "#f39c12";
        resultatDiv.style.display = "block";
        return;
      }
      const variation = (Math.random() * 6 - 3).toFixed(2);
      const variationMonte = variation > 0;
      const predictionMonte = prediction === "⬆️";
      solde -= mise;
      let gain = 0;
      let message = "";
      let resultat = "";
      if ((variationMonte && predictionMonte) || (!variationMonte && !predictionMonte)) {
        gain = mise * cote;
        solde += gain;
        message = `✅ Bonne prédiction (${variation}%) ! Gain : ${gain.toFixed(2)} pièces`;
        resultat = "✅ +";
        resultatDiv.style.color = "#2ecc71";
      } else {
        message = `❌ Mauvaise prédiction (${variation}%) ! Perte : ${mise} pièces`;
        resultat = "❌ -";
        resultatDiv.style.color = "#e74c3c";
      }
      resultatDiv.textContent = message;
      resultatDiv.style.display = "block";
      majSolde();
      const date = new Date().toLocaleTimeString();
      ajouterHistorique({ date, nom, prediction, variation, resultat, montant: gain ? gain.toFixed(2) : mise, solde: solde.toFixed(2) });
    }

    function afficherDetails(nom) {
      document.getElementById("titre-entreprise").textContent = nom;
      document.getElementById("zone-affichage").style.display = "block";
      const ctx = document.getElementById("graphique").getContext("2d");
      if (window.monGraphique) window.monGraphique.destroy();
      window.monGraphique = new Chart(ctx, {
        type: 'line',
        data: {
          labels: ['Lun', 'Mar', 'Mer', 'Jeu', 'Ven'],
          datasets: [{
            label: `Cours ${nom}`,
            data: Array.from({ length: 5 }, () => Math.floor(Math.random() * 50) + 100),
            borderColor: '#cc0000',
            borderWidth: 2,
            fill: false
          }]
        }
      });
      const actus = [
        { title: "Annonce importante", description: `Une nouvelle info pour ${nom}.`, url: "#" },
        { title: "Résultats trimestriels", description: `Les résultats financiers de ${nom} ont été publiés.`, url: "#" },
        { title: "Partenariat stratégique", description: `${nom} s'associe à un nouveau géant.`, url: "#" }
      ];
      const actusDiv = document.getElementById("actus");
      actusDiv.innerHTML = "";
      actus.forEach(a => {
        const bloc = document.createElement("div");
        bloc.innerHTML = `<h4>${a.title}</h4><p>${a.description}</p><a href="${a.url}" target="_blank">Lire plus</a><hr>`;
        actusDiv.appendChild(bloc);
      });
      afficherHistorique();
    }

    afficherCartesEntreprises();
    majSolde();
    afficherHistorique();
    historique.slice().reverse().forEach((h, i) => {
      donneesParis.labels.push(`#${i + 1}`);
      donneesParis.datasets[0].data.push(parseFloat(h.solde));
    });
    majGraphiqueParis();
  </script>
</body>
</html>
